{"version":3,"sources":["../../../../assets/scripts/assets/scripts/star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","speed","onLoad","move","start","update","dt","getPlayerDistance","onPicked","moveAction","callback","callFunc","moveCallback","sequence","node","runAction","type","_this","time","visibleRect","width","target","x","y","height","action","moveBy","v2","easeType","indexOf","easing","destroy","playerPos","game","player","getPosition","dist","position","sub","mag","spawnNewStar","gainScore"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACAC,oBAAY,CAFJ;AAGR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,eAAO;AAlBC,KAHP;;AAwBL;;AAEAC,UA1BK,oBA0BK;AACN,aAAKC,IAAL;AACH,KA5BI;AA8BLC,SA9BK,mBA8BI,CAER,CAhCI;AAkCLC,UAlCK,kBAkCGC,EAlCH,EAkCO;AACR;AACA,YAAI,KAAKC,iBAAL,KAA2B,KAAKP,UAApC,EAAgD;AAC5C;AACA,iBAAKQ,QAAL;AACA;AACH;;AAED;AACA;AACA;AACH,KA7CI;;AA8CLL,UAAM,gBAAY;AACd,YAAIA,OAAO,KAAKM,UAAL,CAAgB,oBAAhB,CAAX;AACA,YAAIC,WAAWf,GAAGgB,QAAH,CAAY,KAAKC,YAAjB,EAA+B,IAA/B,CAAf;;AAEA,YAAIH,aAAad,GAAGkB,QAAH,CAAYV,IAAZ,EAAkBO,QAAlB,CAAjB;AACA,aAAKI,IAAL,CAAUC,SAAV,CAAoBN,UAApB;AACH,KApDI;AAqDL;AACAA,gBAAY,oBAAUO,IAAV,EAAgB;AACxB,YAAIC,QAAQ,IAAZ;AACA,YAAIC,OAAOvB,GAAGwB,WAAH,CAAeC,KAAf,GAAuB,KAAKnB,KAAvC;AACA,YAAIoB,SAAS;AACTC,eAAG,CAAC3B,GAAGwB,WAAH,CAAeC,KAAhB,GAAwB,KAAKN,IAAL,CAAUM,KAD5B;AAETG,eAAG,KAAKT,IAAL,CAAUS,CAAV,GAAc,KAAKT,IAAL,CAAUU,MAAV,GAAiB;AAFzB,SAAb;;AAKA,YAAIC,SAAS9B,GAAG+B,MAAH,CAAUR,IAAV,EAAgBvB,GAAGgC,EAAH,CAAMN,OAAOC,CAAb,EAAgBD,OAAOE,CAAvB,CAAhB,CAAb;;AAEA,YAAMK,WAAW,CAAC,oBAAD,CAAjB;;AAEA,YAAIA,SAASC,OAAT,CAAiBb,IAAjB,IAAyB,CAA7B,EAAgC;AAC5B,mBAAOS,MAAP;AACH;;AAED,eAAOA,OAAOK,MAAP,CAAcnC,GAAGqB,IAAH,GAAd,CAAP;AACH,KAvEI;AAwELJ,kBAAc,wBAAY;AACtB,aAAKE,IAAL,CAAUiB,OAAV;AACH,KA1EI;AA2ELxB,uBAAmB,6BAAY;AAC3B;AACA,YAAIyB,YAAY,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,WAAjB,EAAhB;AACA;AACA,YAAIC,OAAO,KAAKtB,IAAL,CAAUuB,QAAV,CAAmBC,GAAnB,CAAuBN,SAAvB,EAAkCO,GAAlC,EAAX;AACA,eAAOH,IAAP;AACH,KAjFI;AAkFL5B,cAAU,oBAAW;AACjB;AACA,aAAKyB,IAAL,CAAUO,YAAV;AACA;AACA,aAAKP,IAAL,CAAUQ,SAAV;AACA;AACA,aAAK3B,IAAL,CAAUiB,OAAV;AACH;AAzFI,CAAT","file":"star.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\n        pickRadius: 0,\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n        speed: 100\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.move()\n    },\n\n    start () {\n\n    },\n\n    update (dt) {\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n\n        // var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        // var minOpacity = 50;\n        // this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n    move: function () {\n        var move = this.moveAction('easeCubicActionOut')\n        var callback = cc.callFunc(this.moveCallback, this);\n\n        var moveAction = cc.sequence(move, callback)\n        this.node.runAction(moveAction);\n    },\n    // 生成随机运动轨迹动画\n    moveAction: function (type) {\n        var _this = this\n        var time = cc.visibleRect.width / this.speed\n        var target = {\n            x: -cc.visibleRect.width - this.node.width,\n            y: this.node.y - this.node.height/2\n        }\n\n        var action = cc.moveBy(time, cc.v2(target.x, target.y))\n\n        const easeType = ['easeCubicActionOut']\n\n        if (easeType.indexOf(type) < 0) {\n            return action\n        }\n\n        return action.easing(cc[type]())\n    },\n    moveCallback: function () {\n        this.node.destroy();\n    },\n    getPlayerDistance: function () {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    },\n    onPicked: function() {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        // 调用 Game 脚本的得分方法\n        this.game.gainScore();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n    },\n});\n"]}