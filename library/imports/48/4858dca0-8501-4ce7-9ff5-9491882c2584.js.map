{"version":3,"sources":["../../../../assets/scripts/assets/scripts/obstacle.js"],"names":["cc","Class","extends","Component","properties","collisionRadius","onLoad","move","start","update","dt","getPlayerDistance","onPicked","moveAction","callback","callFunc","moveCallback","sequence","node","runAction","type","time","visibleRect","width","game","bgSpeed","target","x","y","moveBy","v2","destroy","playerPos","player","getPosition","dist","position","sub","mag","console","log","spawnNewObstacle"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,yBAAiB;AAhBT,KAHP;;AAsBJ;;AAEDC,UAxBK,oBAwBK;AACN,aAAKC,IAAL;AACH,KA1BI;AA4BLC,SA5BK,mBA4BI,CAER,CA9BI;AAgCLC,UAhCK,kBAgCGC,EAhCH,EAgCO;AACR;AACA,YAAI,KAAKC,iBAAL,KAA2B,KAAKN,eAApC,EAAqD;AACjD;AACA,iBAAKO,QAAL;AACA;AACH;;AAED;AACA;AACA;AACH,KA3CI;;AA4CLL,UAAM,gBAAY;;AAEd,YAAIA,OAAO,KAAKM,UAAL,EAAX;AACA,YAAIC,WAAWd,GAAGe,QAAH,CAAY,KAAKC,YAAjB,EAA+B,IAA/B,CAAf;;AAEA,YAAIH,aAAab,GAAGiB,QAAH,CAAYV,IAAZ,EAAkBO,QAAlB,CAAjB;AACA,aAAKI,IAAL,CAAUC,SAAV,CAAoBN,UAApB;AACH,KAnDI;AAoDL;AACAA,gBAAY,oBAAUO,IAAV,EAAgB;AACxB,YAAIC,OAAOrB,GAAGsB,WAAH,CAAeC,KAAf,GAAuB,KAAKC,IAAL,CAAUC,OAA5C;AACA,YAAIC,SAAS;AACTC,eAAG,CAAC3B,GAAGsB,WAAH,CAAeC,KAAhB,GAAwB,KAAKL,IAAL,CAAUK,KAD5B;AAETK,eAAG;AAFM,SAAb;;AAKA,eAAO5B,GAAG6B,MAAH,CAAUR,IAAV,EAAgBrB,GAAG8B,EAAH,CAAMJ,OAAOC,CAAb,EAAgBD,OAAOE,CAAvB,CAAhB,CAAP;AACH,KA7DI;AA8DLZ,kBAAc,wBAAY;AACtB,aAAKE,IAAL,CAAUa,OAAV;AACH,KAhEI;AAiELpB,uBAAmB,6BAAY;AAC3B;AACA,YAAIqB,YAAY,KAAKR,IAAL,CAAUS,MAAV,CAAiBC,WAAjB,EAAhB;AACA;AACA,YAAIC,OAAO,KAAKjB,IAAL,CAAUkB,QAAV,CAAmBC,GAAnB,CAAuBL,SAAvB,EAAkCM,GAAlC,EAAX;AACAC,gBAAQC,GAAR,CAAYL,IAAZ;;AAEA,eAAOA,IAAP;AACH,KAzEI;;AA2ELvB,cAAU,oBAAW;AACjB;AACA,aAAKY,IAAL,CAAUiB,gBAAV;AACA;AACA,aAAKvB,IAAL,CAAUa,OAAV;AACH;AAhFI,CAAT","file":"obstacle.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n        collisionRadius: 20,\n    },\n\n     // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.move()\n    },\n\n    start () {\n\n    },\n\n    update (dt) {\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.collisionRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n\n        // var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        // var minOpacity = 50;\n        // this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n    move: function () {\n\n        var move = this.moveAction()\n        var callback = cc.callFunc(this.moveCallback, this);\n\n        var moveAction = cc.sequence(move, callback)\n        this.node.runAction(moveAction);\n    },\n    // 生成随机运动轨迹动画\n    moveAction: function (type) {\n        var time = cc.visibleRect.width / this.game.bgSpeed\n        var target = {\n            x: -cc.visibleRect.width - this.node.width,\n            y: 0\n        }\n\n        return cc.moveBy(time, cc.v2(target.x, target.y))\n    },\n    moveCallback: function () {\n        this.node.destroy();\n    },\n    getPlayerDistance: function () {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        console.log(dist)\n\n        return dist;\n    },\n\n    onPicked: function() {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewObstacle();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n    }\n});\n"]}